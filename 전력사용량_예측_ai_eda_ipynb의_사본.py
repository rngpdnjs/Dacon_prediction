# -*- coding: utf-8 -*-
"""전력사용량 예측 AI EDA.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AjbIAyhYxrEh9LhPk_hfQ2vnVkyRZcbR
"""

import os

import numpy as np
import pandas as pd

"""ESS - 생산된 전기를 저장장치에 저장하여 전력이 필요할 때 공급할 수 있도록 하는 시스템.
     > PCS는 전력변환장치
- 둘중 하나만 사용하면 됨.
태양광용량 - 높으면 전력이 줄어드는데 도움 될 것.

# 데이터로드
"""

건물=pd.read_csv(r'C:\Users\MOBIS\Documents\경진대회\open (1)\building_info.csv')

SAMPLE=pd.read_csv(r'C:\Users\MOBIS\Documents\경진대회\open (1)\sample_submission.csv')

TEST=pd.read_csv(r'C:\Users\MOBIS\Documents\경진대회\open (1)\test.csv')

train_df=pd.read_csv(r'C:\Users\MOBIS\Documents\경진대회\open (1)\train.csv')
pd.read_csv(r'C:\Users\MOBIS\Documents\경진대회\open (1)\train.csv')

건물

train_df

건물

""" # 건물 정보 분석

1. 건물 개수 : 100
2. 건물 유형 : ['건물기타', '공공', '대학교', '데이터센터', '백화점및아울렛', '병원', '상용', '아파트', '연구소','지식산업센터','할인마트', '호텔및리조트']
    건물 유형별 평균 면적
    1.공공 : 백육십만(1687602.27625)
    2.아파트 : 이백만(261519.741)
    3.대학교 : 삼십육만(369918.121625)
    4.지식산업센터 : 십칠만(173524.82875)
    5.연구소 : 십만(111818.19125)
    6.건물기타 : 십만(108441.09266666668)
    7.백화점및아울렛 : 십만(103684.60500000001)
    8.병원 : 십만(101975.8875)
    9.상용 : 구만(92678.48250000001)
    10.호텔및리조트 : 칠만(75878.48125000001)
    11.할인마트 : 육만(67594.37875)
    12.데이터센터 : 만(18515.298000000003)

     
"""

건물기타면적=np.mean(건물[건물['건물유형']=='건물기타']['연면적(m2)'].values)
공공면적=np.mean(건물[건물['건물유형']=='공공']['연면적(m2)'].values)
대학교면적=np.mean(건물[건물['건물유형']=='대학교']['연면적(m2)'].values)
데이터센터면적=np.mean(건물[건물['건물유형']=='데이터센터']['연면적(m2)'].values)
백화점및아울렛면적=np.mean(건물[건물['건물유형']=='백화점및아울렛']['연면적(m2)'].values)
병원면적=np.mean(건물[건물['건물유형']=='병원']['연면적(m2)'].values)
상용면적=np.mean(건물[건물['건물유형']=='상용']['연면적(m2)'].values)
아파트면적=np.mean(건물[건물['건물유형']=='아파트']['연면적(m2)'].values)
연구소면적=np.mean(건물[건물['건물유형']=='연구소']['연면적(m2)'].values)
지식산업센터면적=np.mean(건물[건물['건물유형']=='지식산업센터']['연면적(m2)'].values)
할인마트면적=np.mean(건물[건물['건물유형']=='할인마트']['연면적(m2)'].values)
호텔및리조트면적=np.mean(건물[건물['건물유형']=='호텔및리조트']['연면적(m2)'].values)

for 건물유형 in 건물['건물유형'].unique():
    name=건물유형+'면적'
#     print(건물유형,eval(name))

"""# train 데이터 분석"""

train_df

train_df=train_df.drop(columns=['일조(hr)','일사(MJ/m2)','강수량(mm)'])

건물=건물.drop(columns=['태양광용량(kW)','ESS저장용량(kWh)','PCS용량(kW)'])

건물

건물.iloc[0]

DF=pd.merge(train_df,건물, how='outer',on='건물번호')

list1=[]
for 건물유형 in DF['건물유형']:
    print(eval(건물유형+'면적'))
    list1.append(eval(건물유형+'면적'))

DF['평균면적']=np.array(list1)

def CDH(xs):
    ys = []
    for i in range(len(xs)):
        if i < 11:
            ys.append(np.sum(xs[:(i+1)]-26))
        else:
            ys.append(np.sum(xs[(i-11):(i+1)]-26))
    return np.array(ys)

YS=CDH(DF['기온(C)'])

DF['CHD']=YS

DF

import matplotlib.pyplot as plt

from sklearn.preprocessing import StandardScaler

"""기온, CHD 기온, 전력 관계도 확대 PLOT(~500시간의 데이터)
초록 : CHD
파랑 : 기온
빨강 : 전력
"""

for i in range(1,10):
    plt.figure(figsize=(50,15))
    DF_1=DF[DF['건물번호']==i].iloc[:500]
    DF_T=DF_1[['기온(C)','CHD','전력소비량(kWh)','습도(%)','풍속(m/s)']]
    std_scaler=StandardScaler()
    DF_SS=std_scaler.fit_transform(DF_T)
    기온_SS=DF_SS[:,0]
    CHD_SS=DF_SS[:,1]
    전력_SS=DF_SS[:,2]
    습도_SS=DF_SS[:,3]
    풍속_SS=DF_SS[:,4]
    plt.plot(DF_1['일시'],전력_SS,linewidth=4,color='red',alpha=0.6)
    plt.plot(DF_1['일시'],기온_SS,linewidth=2,color='blue')
    plt.plot(DF_1['일시'],CHD_SS,linewidth=2,color='green')
    plt.show()

"""전체 그래프 예시 V"""

for i in range(1,10):
    plt.figure(figsize=(50,15))
    DF_1=DF[DF['건물번호']==i].iloc[:500]
    DF_T=DF_1[['기온(C)','CHD','전력소비량(kWh)','습도(%)','풍속(m/s)']]
    std_scaler=StandardScaler()
    DF_SS=std_scaler.fit_transform(DF_T)
    기온_SS=DF_SS[:,0]
    CHD_SS=DF_SS[:,1]
    전력_SS=DF_SS[:,2]
    습도_SS=DF_SS[:,3]
    풍속_SS=DF_SS[:,4]
    plt.plot(DF_1['일시'],전력_SS,linewidth=4,color='red',alpha=0.6)
    plt.plot(DF_1['일시'],습도_SS,linewidth=2,color='blue')
    plt.plot(DF_1['일시'],풍속_SS,linewidth=2,color='green')
    plt.show()

for i in range(1,3):
    plt.figure(figsize=(50,15))
    DF_1=DF[DF['건물번호']==i]
    DF_T=DF_1[['CHD','전력소비량(kWh)']]
    std_scaler=StandardScaler()
    DF_SS=std_scaler.fit_transform(DF_T)
    CHD_SS=DF_SS[:,0]
    전력_SS=DF_SS[:,1]
    plt.plot(DF_1['일시'],전력_SS,linewidth=4)
    plt.plot(DF_1['일시'],CHD_SS,linewidth=4)
    plt.show()



"""기온,"""